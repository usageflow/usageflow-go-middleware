name: Version Bump and Tag

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Read commit message
        id: commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Determine bump type
        id: bump
        run: |
          COMMIT_MSG="${{ steps.commit.outputs.commit_msg }}"
          if [[ "$COMMIT_MSG" == chore:* ]]; then
            echo "type=skip" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == major:* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == minor:* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        if: steps.bump.outputs.type != 'skip'
        id: version
        run: |
          CURRENT_VERSION=$(cat VERSION)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          case "${{ steps.bump.outputs.type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "$NEW_VERSION" > VERSION
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and tag version
        if: steps.bump.outputs.type != 'skip'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSION
          git commit -m "Bump version to v${{ steps.version.outputs.new_version }}"
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin main --tags
